using AOParser;

COMPILER ActiveOberon 
	public Common.SymTable.SymTab symTab = new ();
	public AOParser.Ast.Module module; 
	//todo up to https://gitlab.inf.ethz.ch/felixf/oberon/-/blob/main/docu/OberonLanguageReport.pdf

	bool IsModule(){
		var obj = symTab.Find(t.val);
		return obj.objClass == Common.SymTable.ObjCLass.MODULE;
	}

	bool IsCast(){
		var obj = symTab.Find(t.val);
		return obj.objClass == Common.SymTable.ObjCLass.VAR;
	}

CHARACTERS
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  eol      = '\n' .
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexDigit = digit + "ABCDEF" .
  binaryDigit = "01" .
  noQuote  = ANY - '"' - eol  .

TOKENS
    ident =  letter { letter | digit | "_" } .
    integer = digit {["'"]digit} | digit {hexDigit} "H" | "0x" {["'"]hexDigit} | "0b" {["'"]binaryDigit}. 
    real =  digit { ["'"]digit } "." { digit } [ ("E" | "D") [ "+" | "-" ] digit { digit } ] .
    character = digit { hexDigit } "X" .
    string =  '"' { noQuote } '"' .

COMMENTS
  FROM "(*" TO "*)" NESTED

IGNORE  tab + cr + lf

PRODUCTIONS
    ActiveOberon =  Module<out module> .

    Ident<out AOParser.Ast.Ident o>
		= ident																	(. o = new AOParser.Ast.Ident{Name = t.val}; .).

	Number<out AOParser.Ast.Number o>											(. o = null; .)
		= integer																(. o = new AOParser.Ast.Number{Value = t.val}; .)
		| real																	(. o = new AOParser.Ast.Number{Value = t.val}; .).

	Module<out AOParser.Ast.Module o> 
		=																		(. o = new AOParser.Ast.Module(); .)
		"MODULE" Ident<out o.Ident>";" (. symTab.OpenScope(); .)
		[ImportList<out o.ImportList>] 
		{Definition<out o.Definition>}
		DeclSeq<out o.DeclSeq> 
		Body<out o.Body>
		ident ".".

	ImportedModule<AOParser.Ast.AstList i> 
		=																		(. var o = new AOParser.Ast.Import(); .)
		Ident<out o.Name> [ ":=" Ident<out o.OriginalName> ]					(. i.Add(o); .)
		(. symTab.Insert(o.GetObj());  .).

	ImportList<out AOParser.Ast.AstList o> 
		=																		(. o = new AOParser.Ast.AstList(); .)
		"IMPORT" ImportedModule<o> {"," ImportedModule<o>} ";".

	Definition<out AOParser.Ast.Definition o> 	
		= 																		(. o = new AOParser.Ast.Definition(); .)	
		"DEFINITION" Ident<out o.Ident> ["REFINES" Qualident<out o.Qualident>] 
		{"PROCEDURE"															(. var p = new AOParser.Ast.DefinitionProc(); .)
			Ident<out p.Ident> [FormalPars<out p.FormalPars>] ";"				(. o.Procs.Add(p); .)
			} 
		"END" ident.

	DeclSeq<out AOParser.Ast.DeclSeq o> 
		=																		(. o = new AOParser.Ast.DeclSeq(); .)
		{ "CONST"																	(. var lst = new AOParser.Ast.IConstTypeVarListDecl.ConstDeclList(); .) 
				{ConstDecl<lst.Values> ";" }											(. o.ConstTypeVarDecls.Add(lst); .)
			| "TYPE"															(. var lst = new AOParser.Ast.IConstTypeVarListDecl.TypeDeclList(); .) 
				{TypeDecl<lst.Values> ";"}												(. o.ConstTypeVarDecls.Add(lst); .)
			| "VAR"																(. var lst = new AOParser.Ast.IConstTypeVarListDecl.VarDeclList(); .) 
				{VarDecl<lst.Values> ";"}												(. o.ConstTypeVarDecls.Add(lst); .) 
			{ ProcDecl<o.ProcDecl> ";"} }.


	ConstDecl<AOParser.Ast.AstList lst> 
		=																		(. var o = new AOParser.Ast.ConstDecl(); .)	
		IdentDef<out o.IdentDef> "=" ConstExpr<out o.ConstExpr>					(. lst.Add(o); .) 
		(. symTab.Insert(o.GetObj());  .).

    TypeDecl<AOParser.Ast.AstList lst> 
		=																		(. var o = new AOParser.Ast.TypeDecl(); .)	
		IdentDef<out o.IdentDef> "=" Type<out o.Type_>							(. lst.Add(o); .)
		(. symTab.Insert(o.GetObj());  .).

	VarDecl<AOParser.Ast.AstList lst> 
		=																		(. var o = new AOParser.Ast.VarDecl(); .)	
		IdentList<out o.IdentList> ":" Type<out o.Type_>						(. lst.Add(o); .)
		(. symTab.Insert(o.GetObjects());  .).

	ProcDecl<AOParser.Ast.AstList lst> 
		= "PROCEDURE"															(. var o = new AOParser.Ast.ProcDecl(); .)	
		ProcHead<out o.ProcHead> ";" 
		DeclSeq<out o.DeclSeq> 
		Body<out o.Body> Ident<out o.Ident>													(. lst.Add(o); .)
		(. var scope = symTab.curScope; symTab.CloseScope();symTab.Insert(o.GetObj(scope)); .).	

	ProcHead<out AOParser.Ast.ProcHead o>  
		=																			(. o = new AOParser.Ast.ProcHead(); .)	
		[SysFlag<out o.SysFlag>] 
		["*"																		(. o.Tag = AOParser.Ast.ProcHead.Tags.Export; .) 
		| "&"																		(. o.Tag = AOParser.Ast.ProcHead.Tags.Initializer; .)
		] IdentDef<out o.IdentDef> (. symTab.OpenScope(); .)
		[FormalPars<out o.FormalPars>].

	SysFlag<out AOParser.Ast.SysFlag o> 
		=																			(. o = new AOParser.Ast.SysFlag(); .)	
		"[" Ident<out o.Ident> "]".

	FormalPars<out AOParser.Ast.FormalPars o> 	
		=																		(. o = new AOParser.Ast.FormalPars(); .)	
		"(" [FPSection<o.FPSections> {";" FPSection<o.FPSections>}] ")" 
		[":" Qualident<out o.Qualident>].

	FPSection<AOParser.Ast.AstList lst> 	
		=																		(. var o = new AOParser.Ast.FPSection(); .)
		["VAR"																		(. o.FpSectionPrefix = AOParser.Ast.FPSection.Prefix.VAR; .) 
		]																			(. AOParser.Ast.Ident i; .)
		Ident<out i>																(. o.Idents.Add(i); .) 
		{"," Ident<out i>															(. o.Idents.Add(i); .) 
		} ":" Type<out o.Type_>														(. lst.Add(o); .)
																					(. symTab.Insert(o.Objects());  .)
		.

	Type<out AOParser.Ast.IType o> 												(. o = null; .) 
		=																		(. var at = new AOParser.Ast.IType.SynonimType(); .)
			Qualident<out at.Qualident>												(. o = at; .)
			|  "ARRAY"															(. var at = new AOParser.Ast.IType.ArrayType(); AOParser.Ast.ConstExpr ce; .)
				[SysFlag<out at.SysFlag>] [ConstExpr<out ce>						(. at.ConstExprs.Add(ce); .) 
				{"," ConstExpr<out ce>												(. at.ConstExprs.Add(ce); .)
				}] "OF" Type<out at.Type_>											(. o = at; .)

			|																	(. symTab.OpenScope(); var at = new AOParser.Ast.IType.RecordType(symTab.curScope); .)
				"RECORD" [SysFlag<out at.SysFlag>] 
					["(" Qualident<out at.Qualident> ")"] 
					FieldList<out at.FieldList>									
					"END"														(. o = at; symTab.CloseScope();.)

			|																	(. var at = new AOParser.Ast.IType.PointerType(); .)
				"POINTER" [SysFlag<out at.SysFlag>] "TO" Type<out at.Type_>		(. o = at; .)

			| 																	(. symTab.OpenScope(true); var at = new AOParser.Ast.IType.ObjectType(symTab.curScope); .)
				"OBJECT" [
				[SysFlag<out at.SysFlag>] 
				["(" Qualident<out at.Qualident> ")"] 
				["IMPLEMENTS" Qualident<out at.ImplementsQualident>] 
				DeclSeq<out at.DeclSeq> Body<out at.Body> Ident<out at.Ident>]	(. o = at; symTab.CloseScope();.)
			|																	(. symTab.OpenScope(); var at = new AOParser.Ast.IType.ProcedureType(symTab.curScope); .)
				"PROCEDURE" [SysFlag<out at.SysFlag>] 
				[FormalPars<out at.FormalPars>]									(. o = at; symTab.CloseScope(); .).

	FieldDecl<out AOParser.Ast.FieldDecl o> 	
	=																			(. o = new AOParser.Ast.FieldDecl(); .)
	[IdentList<out o.IdentList> ":" Type<out o.Type_>							(. symTab.Insert(o.Fields); .) 
	].
	
	FieldList<out AOParser.Ast.FieldList o>
	=																			(. o = new AOParser.Ast.FieldList(); AOParser.Ast.FieldDecl fd; .)
	FieldDecl<out fd>															(. o.FieldDecl.Add(fd); .)
	{";" FieldDecl<out fd>														(. o.FieldDecl.Add(fd); .)
	}.
	
	Body<out AOParser.Ast.Body o> 												(. o = new AOParser.Ast.Body(); .)
	= 																			
	StatBlock<out o.StatBlock> | "END".
	
	StatBlock<out AOParser.Ast.StatBlock o> 	
	= 																			(. o = new AOParser.Ast.StatBlock(); AOParser.Ast.IdentList il; .)
	"BEGIN" ["{" IdentList<out il>												(. o.IdentLists.Add(il); .)
			"}"]												
	StatementSeq<out o.StatementSeq> "END".

	StatementSeq<out AOParser.Ast.StatementSeq o>	
		=																		(. o = new AOParser.Ast.StatementSeq(); AOParser.Ast.IStatement s; .)
		Statement<out s>														(. o.Statements.Add(s); .) 
		{";" Statement<out s>													(. o.Statements.Add(s); .)}.

	Statement<out AOParser.Ast.IStatement os>									(. os=null; .)
		= 	
		[																		(. AOParser.Ast.Designator d; .)
			Designator<out d>	
			(																	(. var o = new AOParser.Ast.IStatement.AssignmentStatement(); o.Designator = d; .) 
				 ":=" Expr<out o.Expr>											(. os = o; .)
				|																(. var o = new AOParser.Ast.IStatement.ProcCallStatement(); o.Designator = d; .) 
											(. os = o;.) )
		|																		(. var o = new AOParser.Ast.IStatement.IfStatement(); .) 
			"IF" Expr<out o.If.Cond> "THEN" StatementSeq<out o.If.ThenBody>
				{																(. var elsif = new AOParser.Ast.IStatement.IfStatement.IfThen(); .) 
				"ELSIF" Expr<out elsif.Cond> "THEN" 
					StatementSeq<out elsif.ThenBody>							(. o.ELSIFs.Add(elsif); .)
				}
				["ELSE" StatementSeq<out o.ElseBody>] "END"						(. os = o; .)
		|																		(. var o = new AOParser.Ast.IStatement.CaseStatement(); .) 
			"CASE" Expr<out o.Expr> "DO"										(. var c = new AOParser.Ast.Case(); .) 
			Case<out c>															(. o.Cases.Add(c); .) 
			{"|" Case<out c>													(. o.Cases.Add(c); .)
			}
				["ELSE" StatementSeq<out o.ElseBody>] "END"						(. os = o;.)
		|																		(. var o = new AOParser.Ast.IStatement.WhileStatement(); .) 
			"WHILE" Expr<out o.Expr> "DO" 
				StatementSeq<out o.StatementSeq> 
			"END"																(. os = o; .)
		|																		(. var o = new AOParser.Ast.IStatement.RepeatStatement(); .) 
			"REPEAT" 
				StatementSeq<out o.StatementSeq> 
			"UNTIL" Expr<out o.Expr>											(. os = o; .)
		|																		(. var o = new AOParser.Ast.IStatement.ForStatement(); .) 
			"FOR" Ident<out o.Ident> ":=" Expr<out o.Expr> 
				"TO" Expr<out o.ToExpr> ["BY" ConstExpr<out o.ByExpr>]
				"DO" 
					StatementSeq<out o.StatementSeq> 
				"END"															(. os = o;.)
		|																		(. var o = new AOParser.Ast.IStatement.LoopStatement(); .) 
			"LOOP" StatementSeq<out o.StatementSeq> "END"						(. os = o;.)
		|																		(. var o = new AOParser.Ast.IStatement.WithStatement(); .) 
			"WITH" Qualident<out o.Qualident1> ":" 
				Qualident<out o.Qualident2>	"DO"										
				StatementSeq<out o.StatementSeq> "END"							(. os = o;.)
		|																		(. var o = new AOParser.Ast.IStatement.ExitStatement(); .) 
			"EXIT"																(. os = o;.)
		|																		(. var o = new AOParser.Ast.IStatement.ReturnStatement(); .) 
			"RETURN" [Expr<out o.Expr>]											(. os = o;.)

		| 																		(. var o = new AOParser.Ast.IStatement.AwaitStatement(); .) 
			"AWAIT" "(" Expr<out o.Expr> ")"									(. os = o;.)

		| 																		(. var o = new AOParser.Ast.IStatement.StatBlockStatement(); .) 
			StatBlock<out o.StatBlock>											(. os = o;.)
			].

	Case<out AOParser.Ast.Case o> 	
		=																		(. o = new AOParser.Ast.Case(); AOParser.Ast.CaseLabels cl; .)
		[CaseLabels<out cl>														(. o.CaseLabels.Add(cl); .) 
		{"," CaseLabels<out cl>													(. o.CaseLabels.Add(cl); .)
		} 
		":" StatementSeq<out o.StatementSeq>].

	CaseLabels<out AOParser.Ast.CaseLabels o> 	
		=																		(. o = new AOParser.Ast.CaseLabels(); .)	
		ConstExpr<out o.ConstExpr1> [".." ConstExpr<out o.ConstExpr2>].

	ConstExpr<out AOParser.Ast.ConstExpr o>	
		=																		(. o = new AOParser.Ast.ConstExpr(); .)	
		Expr<out o.Expr>.

	Expr<out AOParser.Ast.Expr o> 	
		=																		(. o = new AOParser.Ast.Expr(); .)		
		SimpleExpr<out o.SimpleExpr> [Relation<out o.Relation> 
		SimpleExpr<out o.SimpleExpr2>].

	SimpleExpr<out AOParser.Ast.SimpleExpr o>	
		=																		(. o = new AOParser.Ast.SimpleExpr(); AOParser.Ast.SimpleElementExpr e; .)		
		Term<out o.Term> {														(. e = new AOParser.Ast.SimpleElementExpr(); .)  
		MulOp<out e.MulOp> Term<out e.Term>										(. o.SimpleExprElements.Add(e); .)
		}.

	Term<out AOParser.Ast.Term o> 	
		=																		(. o = new AOParser.Ast.Term(); AOParser.Ast.TermElementExpr e; .)		
		["+"																	(. o.Prefix = AOParser.Ast.Term.TermExprPrefix.Add; .)
		| "-"																	(. o.Prefix = AOParser.Ast.Term.TermExprPrefix.Sub; .)
		] Factor<out o.Factor> {												(. e = new AOParser.Ast.TermElementExpr(); .) 
		AddOp<out e.AddOp> Factor<out e.Factor>									(. o.TermElements.Add(e); .)
		}.

	Factor<out AOParser.Ast.IFactor f>											(. f = null;.)	
		=																		(. var o = new AOParser.Ast.IFactor.DesignatorFactor(); .) 
		Designator<out o.Value>													(. f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.NumberFactor(); .) 
		Number<out o.Value>														(. f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.CharacterFactor(); .) 
		character																(. o.Value = t.val; f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.StringFactor(); .) 
		string																	(. o.Value = t.val; f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.NilFactor(); .) 
		"NIL"																	(. f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.SetFactor(); .) 
		Set<out o.Value>														(. f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.ExprFactor(); .) 
		"(" Expr<out o.Value> ")"												(. f = o; .)
		|																		(. var o = new AOParser.Ast.IFactor.NegFactor(); .) 
		"~" Factor<out o.Value>													(. f = o; .) .

	Set<out AOParser.Ast.Set o>	
		=																		(. o = new AOParser.Ast.Set(); AOParser.Ast.Element e; .)	
		"{" [Element<out e>														(. o.Elements.Add(e); .) 
		{"," Element<out e>														(. o.Elements.Add(e); .) 
		}] "}".

	Element<out AOParser.Ast.Element o> 	
		=																		(. o = new AOParser.Ast.Element(); .)	 
		Expr<out o.Expr1> [".." Expr<out o.Expr2> ].

	Relation<out AOParser.Ast.Relation o>										(. o = new AOParser.Ast.Relation(); .)
		= 
		"="																		(. o.Op = AOParser.Ast.Relation.Relations.Eq ; .)
		| "#"																	(. o.Op = AOParser.Ast.Relation.Relations.Neq ; .)
		| "<"																	(. o.Op = AOParser.Ast.Relation.Relations.Lss ; .)
		| "<="																	(. o.Op = AOParser.Ast.Relation.Relations.Leq ; .)
		| ">"																	(. o.Op = AOParser.Ast.Relation.Relations.Gtr ; .)
		| ">="																	(. o.Op = AOParser.Ast.Relation.Relations.Geq ; .)
		| "IN"																	(. o.Op = AOParser.Ast.Relation.Relations.In ; .)
		| "IS"																	(. o.Op = AOParser.Ast.Relation.Relations.Is ; .).

	MulOp<out AOParser.Ast.MulOp o>												(. o = new AOParser.Ast.MulOp(); .)	
		= 
		"*"																		(. o.Op = AOParser.Ast.MulOp.MulOps.Mul; .)
		| "/"																	(. o.Op = AOParser.Ast.MulOp.MulOps.Division; .)
		| "DIV"																	(. o.Op = AOParser.Ast.MulOp.MulOps.DIV; .)
		| "MOD"																	(. o.Op = AOParser.Ast.MulOp.MulOps.MOD; .)
		| "&"																	(. o.Op = AOParser.Ast.MulOp.MulOps.AND; .) .
	AddOp<out AOParser.Ast.AddOp o>												(. o = new AOParser.Ast.AddOp(); .) 	 
		= 
		"+"																		(. o.Op = AOParser.Ast.AddOp.AddOps.Add; .)
		| "-"																	(. o.Op = AOParser.Ast.AddOp.AddOps.Sub; .)
		| "OR"																	(. o.Op = AOParser.Ast.AddOp.AddOps.Or; .).


	Designator<out AOParser.Ast.Designator o>
		=																		(. o = new AOParser.Ast.Designator(this.symTab.curScope); .) 
		Qualident<out o.Qualident> 
		{ 
			  "."																(. var s = new AOParser.Ast.Designator.IDesignatorSpec.RecordDesignatorSpec(); .) 
			  Ident<out s.Value>												(. o.Specs.Add(s); .)
			| "["																(. var s = new AOParser.Ast.Designator.IDesignatorSpec.ArrayDesignatorSpec(); .) 
			ExprList<out s.Value> "]"											(. o.Specs.Add(s); .)
			| "^"																(. var s = new AOParser.Ast.Designator.IDesignatorSpec.PointerDesignatorSpec(); .) 
																				(. o.Specs.Add(s); .)
			| IF(IsCast()) "("													(. var s = new AOParser.Ast.Designator.IDesignatorSpec.CastDesignatorSpec(symTab.curScope); .) 
			Qualident<out s.Value>												(. o.Specs.Add(s); .)  
			")" 
			| 																	(. var s = new AOParser.Ast.Designator.IDesignatorSpec.ProcCallDesignatorSpec(); .)
			"(" [ExprList<out s.Value>] ")"										(. o.Specs.Add(s); .)
			}.

	ExprList<out AOParser.Ast.ExprList o>
		=																		(. o = new AOParser.Ast.ExprList(); AOParser.Ast.Expr e; .)
		Expr<out e>																(. o.Exprs.Add(e); .) 
		{"," Expr<out e>														(. o.Exprs.Add(e); .)
		}.

	IdentList<out AOParser.Ast.IdentList o> 	
		=																		(. o = new AOParser.Ast.IdentList(); AOParser.Ast.IdentDef id; .)
		IdentDef<out id>														(. o.IdentDefs.Add(id); .)
		{","																	
		IdentDef<out id>														(. o.IdentDefs.Add(id); .)
		}.

	Qualident<out AOParser.Ast.Qualident o>
		=																		(. o = new AOParser.Ast.Qualident(symTab.curScope); .)
		Ident<out o.Ident1> [IF(IsModule()) "." Ident<out o.Ident2>] .

	IdentDef<out AOParser.Ast.IdentDef o> 	
		=																		(. o = new AOParser.Ast.IdentDef (); .)
		Ident<out o.Ident> 
		["*"																	(. o.Export = AOParser.Ast.IdentDef.IdentExport.Export; .)
		| "-"																	(. o.Export = AOParser.Ast.IdentDef.IdentExport.ExportReadonly; .)].

END ActiveOberon.