using CPParser;

COMPILER CP
	public AstBuilder builder = new AstBuilder(); 

CHARACTERS
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  eol      = '\n'.
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexDigit = digit + "ABCDEF" .
  noQuote  = ANY - '"' - eol  .
  noQuote2  = ANY - "'" - eol  .

TOKENS
	ident = (letter | "_") {letter | "_" | digit}.
	integer = digit {digit} | digit {hexDigit} ( "H" | "L" ).
	real = digit {digit} "." {digit} [ "E" ["+" | "-"] digit {digit} ].
	character  = digit {hexDigit} "X".
	string  = '"' {noQuote} '"' | "'" {noQuote2} "'".

COMMENTS FROM "(*" TO "*)" NESTED

IGNORE  tab + cr + lf

PRODUCTIONS
	CP           =  Module . 

	Ident<out CPParser.Ast.Ident o>
		= ident                  (. o = new CPParser.Ast.Ident{Name = t.val}; .).

	number = integer | real.

	Module 
		=	"MODULE" Ident<out builder.Module.Ident> 
		";" [ImportList<out builder.Module.ImportList>] DeclSeq<out builder.Module.DeclSeq> ["BEGIN" StatementSeq] ["CLOSE" StatementSeq] "END" ident ".".

	ImportedModule<CPParser.Ast.AstList i> 
		= (. var o = new CPParser.Ast.Import(); .)
		Ident<out o.Name> [ ":=" Ident<out o.OriginalName> 
		] (. i.Add(o); .).

	ImportList<out CPParser.Ast.AstList o> 
		= (. o = new CPParser.Ast.AstList(); .)
		"IMPORT" ImportedModule<o> {"," ImportedModule<o>} ";".
	DeclSeq<out CPParser.Ast.DeclSeq o> 
		=	(. o = new CPParser.Ast.DeclSeq(); .)
		{ "CONST" {ConstDecl<o.ConstTypeVarDecls> ";" } | "TYPE" {TypeDecl<o.ConstTypeVarDecls> ";"} |
			"VAR" {VarDecl<o.ConstTypeVarDecls> ";"}} {ProcDecl<o.ProcForwardDecls> ";" | ForwardDecl<o.ProcForwardDecls> ";"}.
	ConstDecl<CPParser.Ast.AstList lst> 
		= (. var o = new CPParser.Ast.ConstDecl(); .)	
		IdentDef<out o.IdentDef> "=" ConstExpr (. lst.Add(o); .) .
	TypeDecl<CPParser.Ast.AstList lst> 
		= (. var o = new CPParser.Ast.TypeDecl(); .)	
		IdentDef<out o.IdentDef> "=" Type (. lst.Add(o); .).
	VarDecl<CPParser.Ast.AstList lst> 
		= (. var o = new CPParser.Ast.VarDecl(); .)	
		IdentList<out o.IdentList> ":" Type (. lst.Add(o); .).

	ProcDecl<CPParser.Ast.AstList lst> 
		= (. var o = new CPParser.Ast.ProcDecl(); .)	
		"PROCEDURE" [Receiver] IdentDef<out o.IdentDef> [FormalPars] MethAttributes
		[";" DeclSeq<out o.DeclSeq> ["BEGIN" StatementSeq] "END" ident] (. lst.Add(o); .).

	ForwardDecl<CPParser.Ast.AstList lst> 
		= (. var o = new CPParser.Ast.ForwardDecl(); .)	
		"PROCEDURE" "^" [Receiver] IdentDef<out o.IdentDef> [FormalPars] MethAttributes(. lst.Add(o); .).

	MethAttributes	
		=	
		["," "NEW"] ["," ("ABSTRACT" | "EMPTY" | "EXTENSIBLE")].
	
	FormalPars 	
		=	
		"(" [FPSection {";" FPSection}] ")" [":" Type].
	FPSection 	
		=	
		["VAR" | "IN" | "OUT"] ident {"," ident} ":" Type.
	Receiver	
		=
		"(" ["VAR" | "IN"] ident ":" ident ")".
	Type 	
		=
		Qualident
			|  "ARRAY" [ConstExpr {"," ConstExpr}] "OF" Type 
			| ["ABSTRACT" | "EXTENSIBLE" | "LIMITED"]
				"RECORD" ["(" Qualident ")"] FieldList {";" FieldList} "END"
			| "POINTER" "TO" Type
			| "PROCEDURE" [FormalPars].
	FieldList 	
		= (. CPParser.Ast.IdentList a; .)
		[IdentList<out a> ":" Type].
	StatementSeq	=	Statement {";" Statement}.
	Statement 	=	[ Designator ":=" Expr 
			| Designator ["(" [ExprList] ")"] 
			| "IF" Expr "THEN" StatementSeq
				{"ELSIF" Expr "THEN" StatementSeq}
				["ELSE" StatementSeq] "END" 
			| "CASE" Expr "OF" Case {"|" Case}
				["ELSE" StatementSeq] "END"
			| "WHILE" Expr "DO" StatementSeq "END"
			| "REPEAT" StatementSeq "UNTIL" Expr 
			| "FOR" ident ":=" Expr "TO" Expr ["BY" ConstExpr]
				"DO" StatementSeq "END" 
			| "LOOP" StatementSeq "END"
			| "WITH" [ Guard "DO" StatementSeq ]
				{"|" [ Guard "DO" StatementSeq ] }
				["ELSE" StatementSeq] "END"
			| "EXIT" 
			| "RETURN" [Expr]
			].
	Case 	=	[CaseLabels {"," CaseLabels} ":" StatementSeq].
	CaseLabels 	=	ConstExpr [".." ConstExpr].
	Guard	=	Qualident ":" Qualident.
	ConstExpr	=	Expr.
	Expr 	=	SimpleExpr [Relation SimpleExpr].
	SimpleExpr	=	["+" | "-"] Term {AddOp Term}.
	Term 	=	Factor {MulOp Factor}.
	Factor 	=	Designator | number | character | string | "NIL" | Set |
			"(" Expr ")" | "~" Factor.
	Set	=	"{" [Element {"," Element}] "}".
	Element 	=	Expr [".." Expr].
	Relation 	=	"=" | "#" | "<" | "<=" | ">" | ">=" | "IN" | "IS".
	AddOp 	=	"+" | "-" | "OR".
	MulOp 	=	"*" | "/" | "DIV" | "MOD" | "&".
	Designator 	=	Qualident {"." ident | "[" ExprList "]" | "^" | "(" Qualident ")"
			| "(" [ExprList] ")"} [ "$" ].
	ExprList 	=	Expr {"," Expr}.
	IdentList<out CPParser.Ast.IdentList o> 	
		= (. o = new CPParser.Ast.IdentList(); var id = new CPParser.Ast.IdentDef(); .)
		IdentDef<out id> (. o.IdentDefs.Add(id); .)
		{"," (. id = new CPParser.Ast.IdentDef(); .)
		IdentDef<out id> (. o.IdentDefs.Add(id); .)}.
	Qualident 	=	[ident "."] ident.
	IdentDef<out CPParser.Ast.IdentDef o> 	
		= (. o = new CPParser.Ast.IdentDef (); .)
		Ident<out o.Ident> 
		["*" (. o.Export = CPParser.Ast.IdentDef.IdentExport.Export; .)
		| "-" (. o.Export = CPParser.Ast.IdentDef.IdentExport.ExportReadonly; .)].
END CP.