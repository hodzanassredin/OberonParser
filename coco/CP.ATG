using CPParser;

COMPILER CP
	public AstBuilder builder = new AstBuilder(); 

CHARACTERS
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  eol      = '\n'.
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexDigit = digit + "ABCDEF" .
  noQuote  = ANY - '"' - eol  .
  noQuote2  = ANY - "'" - eol  .

TOKENS
	ident = (letter | "_") {letter | "_" | digit}.
	integer = digit {digit} | digit {hexDigit} ( "H" | "L" ).
	real = digit {digit} "." {digit} [ "E" ["+" | "-"] digit {digit} ].
	character  = digit {hexDigit} "X".
	string  = '"' {noQuote} '"' | "'" {noQuote2} "'".

COMMENTS FROM "(*" TO "*)" NESTED

IGNORE  tab + cr + lf

PRODUCTIONS
	CP           =  Module . 

	Ident<out CPParser.Ast.Ident o>
	= ident                  (. o = new CPParser.Ast.Ident{Name = t.val}; .).

	number = integer | real.

	Module 
	=	"MODULE" Ident<out builder.Module.Ident> 
		";" [ImportList<out builder.Module.ImportList>] DeclSeq ["BEGIN" StatementSeq] ["CLOSE" StatementSeq] "END" ident ".".

	ImportedModule<CPParser.Ast.ImportList i> 
	= (. var o = new CPParser.Ast.Import(); .)
	Ident<out o.Name> [ ":=" Ident<out o.OriginalName> 
	] (. i.Imports.Add(o); .).

	ImportList<out CPParser.Ast.ImportList o> 
	= (. o = new CPParser.Ast.ImportList(); .)
		"IMPORT" ImportedModule<o> {"," ImportedModule<o>} ";".
	DeclSeq 	=	{ "CONST" {ConstDecl ";" } | "TYPE" {TypeDecl ";"} |
			"VAR" {VarDecl ";"}} {ProcDecl ";" | ForwardDecl ";"}.
	ConstDecl	=	IdentDef "=" ConstExpr.
	TypeDecl	=	IdentDef "=" Type.
	VarDecl	=	IdentList ":" Type.
	ProcDecl 	=	"PROCEDURE" [Receiver] IdentDef [FormalPars] MethAttributes
			[";" DeclSeq ["BEGIN" StatementSeq] "END" ident].
	MethAttributes	=	["," "NEW"] ["," ("ABSTRACT" | "EMPTY" | "EXTENSIBLE")].
	ForwardDecl 	=	"PROCEDURE" "^" [Receiver] IdentDef [FormalPars] MethAttributes.
	FormalPars 	=	"(" [FPSection {";" FPSection}] ")" [":" Type].
	FPSection 	=	["VAR" | "IN" | "OUT"] ident {"," ident} ":" Type.
	Receiver	=	"(" ["VAR" | "IN"] ident ":" ident ")".
	Type 	=	Qualident
			|  "ARRAY" [ConstExpr {"," ConstExpr}] "OF" Type 
			| ["ABSTRACT" | "EXTENSIBLE" | "LIMITED"]
				"RECORD" ["(" Qualident ")"] FieldList {";" FieldList} "END"
			| "POINTER" "TO" Type
			| "PROCEDURE" [FormalPars].
	FieldList 	=	[IdentList ":" Type].
	StatementSeq	=	Statement {";" Statement}.
	Statement 	=	[ Designator ":=" Expr 
			| Designator ["(" [ExprList] ")"] 
			| "IF" Expr "THEN" StatementSeq
				{"ELSIF" Expr "THEN" StatementSeq}
				["ELSE" StatementSeq] "END" 
			| "CASE" Expr "OF" Case {"|" Case}
				["ELSE" StatementSeq] "END"
			| "WHILE" Expr "DO" StatementSeq "END"
			| "REPEAT" StatementSeq "UNTIL" Expr 
			| "FOR" ident ":=" Expr "TO" Expr ["BY" ConstExpr]
				"DO" StatementSeq "END" 
			| "LOOP" StatementSeq "END"
			| "WITH" [ Guard "DO" StatementSeq ]
				{"|" [ Guard "DO" StatementSeq ] }
				["ELSE" StatementSeq] "END"
			| "EXIT" 
			| "RETURN" [Expr]
			].
	Case 	=	[CaseLabels {"," CaseLabels} ":" StatementSeq].
	CaseLabels 	=	ConstExpr [".." ConstExpr].
	Guard	=	Qualident ":" Qualident.
	ConstExpr	=	Expr.
	Expr 	=	SimpleExpr [Relation SimpleExpr].
	SimpleExpr	=	["+" | "-"] Term {AddOp Term}.
	Term 	=	Factor {MulOp Factor}.
	Factor 	=	Designator | number | character | string | "NIL" | Set |
			"(" Expr ")" | "~" Factor.
	Set	=	"{" [Element {"," Element}] "}".
	Element 	=	Expr [".." Expr].
	Relation 	=	"=" | "#" | "<" | "<=" | ">" | ">=" | "IN" | "IS".
	AddOp 	=	"+" | "-" | "OR".
	MulOp 	=	"*" | "/" | "DIV" | "MOD" | "&".
	Designator 	=	Qualident {"." ident | "[" ExprList "]" | "^" | "(" Qualident ")"
			| "(" [ExprList] ")"} [ "$" ].
	ExprList 	=	Expr {"," Expr}.
	IdentList 	=	IdentDef {"," IdentDef}.
	Qualident 	=	[ident "."] ident.
	IdentDef 	=	ident ["*" | "-"].
END CP.